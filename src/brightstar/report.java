/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package brightstar;

import DBconnection.DBConnection;
import brightstar.SubFrames.UpdateBill;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import functions.Bill;
import functions.expenditure;
import java.awt.print.PrinterException;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.NumberFormatter;
import supportive.GenerateBalenceReportPDF;
import supportive.GroupButtonUtils;

/**
 *
 * @author Pasan
 */
public class report extends javax.swing.JPanel {

    /**
     * Creates new form PendingPaymentsPanel
     */
    public report() {
        initComponents();
        
       
       
        oneM.setSelected(true);
        
       
        
         
        /*oneM.setSelected(true);
        
        if(GroupButtonUtils.getSelectedButtonText(timePeriod).equals("Custom")){
               customField.setEnabled(false);
        }*/
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        timePeriod = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        waterB = new javax.swing.JCheckBox();
        phoneB = new javax.swing.JCheckBox();
        electricityB = new javax.swing.JCheckBox();
        renrB = new javax.swing.JCheckBox();
        maintenanceB = new javax.swing.JCheckBox();
        otherB = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        selectAllType = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        threeM = new javax.swing.JRadioButton();
        oneM = new javax.swing.JRadioButton();
        onrY = new javax.swing.JRadioButton();
        errorTime = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        pending = new javax.swing.JCheckBox();
        payed = new javax.swing.JCheckBox();
        selectPayment = new javax.swing.JCheckBox();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1600, 1010));

        jPanel2.setBackground(new java.awt.Color(0, 51, 204));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Expenditure Reports");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(445, 445, 445)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Report Type");

        waterB.setBackground(new java.awt.Color(204, 204, 204));
        waterB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        waterB.setText("water");
        waterB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waterBActionPerformed(evt);
            }
        });

        phoneB.setBackground(new java.awt.Color(204, 204, 204));
        phoneB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        phoneB.setText("phone");
        phoneB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneBActionPerformed(evt);
            }
        });

        electricityB.setBackground(new java.awt.Color(204, 204, 204));
        electricityB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        electricityB.setText("electricity");
        electricityB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                electricityBActionPerformed(evt);
            }
        });

        renrB.setBackground(new java.awt.Color(204, 204, 204));
        renrB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        renrB.setText("rent");
        renrB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renrBActionPerformed(evt);
            }
        });

        maintenanceB.setBackground(new java.awt.Color(204, 204, 204));
        maintenanceB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        maintenanceB.setText("maintenance");

        otherB.setBackground(new java.awt.Color(204, 204, 204));
        otherB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        otherB.setText("other");
        otherB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otherBActionPerformed(evt);
            }
        });

        selectAllType.setBackground(new java.awt.Color(204, 204, 204));
        selectAllType.setText("Select All");
        selectAllType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(50, 50, 50)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(waterB)
                                    .addComponent(phoneB)
                                    .addComponent(renrB))
                                .addGap(28, 28, 28)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(electricityB)
                                    .addComponent(maintenanceB)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(181, 181, 181)
                                .addComponent(otherB)))
                        .addGap(53, 53, 53))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectAllType)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(electricityB)
                    .addComponent(phoneB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(waterB)
                .addGap(1, 1, 1)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maintenanceB)
                    .addComponent(renrB))
                .addGap(5, 5, 5)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(otherB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectAllType)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel5.setText("Time Period");

        threeM.setBackground(new java.awt.Color(204, 204, 204));
        timePeriod.add(threeM);
        threeM.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        threeM.setText("Three Months");
        threeM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeMActionPerformed(evt);
            }
        });

        oneM.setBackground(new java.awt.Color(204, 204, 204));
        timePeriod.add(oneM);
        oneM.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        oneM.setText("One Month");
        oneM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneMActionPerformed(evt);
            }
        });

        onrY.setBackground(new java.awt.Color(204, 204, 204));
        timePeriod.add(onrY);
        onrY.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        onrY.setText("One year");
        onrY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onrYActionPerformed(evt);
            }
        });

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/brightstar/images/icons8_Schedule_100px_1.png"))); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(errorTime, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addContainerGap(96, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(oneM)
                            .addComponent(threeM)
                            .addComponent(onrY))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(70, 70, 70))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(oneM)
                        .addGap(29, 29, 29)
                        .addComponent(threeM)
                        .addGap(28, 28, 28)
                        .addComponent(onrY)
                        .addGap(49, 49, 49)
                        .addComponent(errorTime, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel6)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("Payment Status");

        pending.setBackground(new java.awt.Color(204, 204, 204));
        pending.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        pending.setText("Pending");
        pending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pendingActionPerformed(evt);
            }
        });

        payed.setBackground(new java.awt.Color(204, 204, 204));
        payed.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        payed.setText("Payed");
        payed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payedActionPerformed(evt);
            }
        });

        selectPayment.setBackground(new java.awt.Color(204, 204, 204));
        selectPayment.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        selectPayment.setText("Select All");
        selectPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectPaymentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pending)
                            .addComponent(payed)
                            .addComponent(selectPayment)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(payed)
                .addGap(18, 18, 18)
                .addComponent(pending)
                .addGap(1, 1, 1)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(selectPayment)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        jTable1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Date", "Type", "Description", "Officer in Charge", "Cheque Num", "Payed Ammount", "Total Ammount"
            }
        ));
        jTable1.setRowHeight(22);
        jScrollPane1.setViewportView(jTable1);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/brightstar/images/icons8_Link_96px.png"))); // NOI18N

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/brightstar/images/icons8_Link_96px.png"))); // NOI18N

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/brightstar/images/icons8_Table_Properties_100px_1.png"))); // NOI18N
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        jLabel9.setText("Genarate");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/brightstar/images/icons8_PDF_50px.png"))); // NOI18N
        jLabel10.setText("Make a PDF");
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel8)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(29, 29, 29)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(25, 25, 25)
                                    .addComponent(jLabel9))))))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(98, 98, 98)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addGap(78, 78, 78)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addContainerGap(41, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void waterBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waterBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_waterBActionPerformed

    private void electricityBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_electricityBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_electricityBActionPerformed

    private void renrBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renrBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_renrBActionPerformed

    private void phoneBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneBActionPerformed

    private void otherBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_otherBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_otherBActionPerformed

    private void threeMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeMActionPerformed
        
        
    }//GEN-LAST:event_threeMActionPerformed

    private void payedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_payedActionPerformed

    private void pendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pendingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pendingActionPerformed

    private void oneMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneMActionPerformed
       /* customField.setEnabled(false);
        
        if(GroupButtonUtils.getSelectedButtonText(timePeriod).equals("Custom")){
               customField.setEnabled(true);
        }*/
    }//GEN-LAST:event_oneMActionPerformed

    
    public String[] getSelectedypes(){
            String[] types = new String[6];
            
            for(int i = 0; i<6 ; i++){
                types[i] = "";
            }
            
            if(electricityB.isSelected()){
                types[0] = "electricity";
            }

            if(waterB.isSelected()){
                types[1] = "water";
            }
            
            if(phoneB.isSelected()){
                types[2] = "phone";
            }
            
            if(renrB.isSelected()){
                types[3] = "rent";
            }
            
            if(maintenanceB.isSelected()){
                types[4] = "maintenance";
            }
            
            if(otherB.isSelected()){
                types[5] = "other";
            }
            
            
            return types;
    }
    
     public void clearTable(){
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.getDataVector().removeAllElements();
        revalidate(); 
    }
    
   
    public ArrayList<expenditure> getPaymentNoNExpenditure(){
            DBConnection con = new DBConnection();
            ArrayList<expenditure> nonexpList = new ArrayList<>();
            
            String viewAll = "SELECT * FROM expenditure where  total > payed  ";
            
            try {
            PreparedStatement ps = con.getConnection().prepareStatement(viewAll);
            
            ResultSet resultSet = ps.executeQuery();
            
            while(resultSet.next()){
                expenditure exp = new expenditure();
                exp.ID = resultSet.getString(1);
                exp.Type = resultSet.getString(2);
                exp.Date = resultSet.getString(3);
                exp.des = resultSet.getString(4);
                exp.units = resultSet.getInt(5);
                exp.officer = resultSet.getString(6);
                exp.payed = resultSet.getDouble(7);
                exp.total = resultSet.getDouble(8);
                exp.chequeNum = resultSet.getInt(9);
                exp.month = resultSet.getString(10);
                nonexpList.add(exp);
            }
              
        } catch (SQLException ex) {
            Logger.getLogger(bill.class.getName()).log(Level.SEVERE, null, ex);
        }
        return nonexpList;
    
        }
    
    public ArrayList<expenditure> getPaymentProExpenditure(){
            DBConnection con = new DBConnection();
            ArrayList<expenditure> nonexpList = new ArrayList<>();
            
            String viewAll = "SELECT * FROM expenditure where  total = payed  ";
            
            try {
            PreparedStatement ps = con.getConnection().prepareStatement(viewAll);
            
            ResultSet resultSet = ps.executeQuery();
            
            while(resultSet.next()){
                expenditure exp = new expenditure();
                exp.ID = resultSet.getString(1);
                exp.Type = resultSet.getString(2);
                exp.Date = resultSet.getString(3);
                exp.des = resultSet.getString(4);
                exp.units = resultSet.getInt(5);
                exp.officer = resultSet.getString(6);
                exp.payed = resultSet.getDouble(7);
                exp.total = resultSet.getDouble(8);
                exp.chequeNum = resultSet.getInt(9);
                exp.month = resultSet.getString(10);
                nonexpList.add(exp);
            }
              
        } catch (SQLException ex) {
            Logger.getLogger(bill.class.getName()).log(Level.SEVERE, null, ex);
        }
        return nonexpList;
    
        }
    
    public ArrayList<expenditure> getTypeExpenditure(){
            DBConnection con = new DBConnection();
            ArrayList<expenditure> nonexpList = new ArrayList<>();
            
            String[] type = this.getSelectedypes();
            
            String viewAll = "SELECT * FROM expenditure where  type = '"+type[0]+"' OR type = '"+type[1]+"' OR type = '"+type[2]+"' OR type = '"+type[3]+"'"+
                                                               "OR type = '"+type[4]+"' OR type = '"+type[5]+"'";
            
            try {
            PreparedStatement ps = con.getConnection().prepareStatement(viewAll);
            
            ResultSet resultSet = ps.executeQuery();
            
            while(resultSet.next()){
                expenditure exp = new expenditure();
                exp.ID = resultSet.getString(1);
                exp.Type = resultSet.getString(2);
                exp.Date = resultSet.getString(3);
                exp.des = resultSet.getString(4);
                exp.units = resultSet.getInt(5);
                exp.officer = resultSet.getString(6);
                exp.payed = resultSet.getDouble(7);
                exp.total = resultSet.getDouble(8);
                exp.chequeNum = resultSet.getInt(9);
                exp.month = resultSet.getString(10);
                nonexpList.add(exp);
            }
              
        } catch (SQLException ex) {
            Logger.getLogger(bill.class.getName()).log(Level.SEVERE, null, ex);
        }
        return nonexpList;
    
        }
    
       public String Smonth(){
    
        int month = Calendar.getInstance().get(Calendar.MONTH) + 1;
        String Stmonth = null;
        
        if(month<10){
        Stmonth = "0"+Integer.toString(month);
        }else{
            Stmonth = Integer.toString(month);
        }
        
        return Stmonth;
    }
    
    public String getYear(){
    return Integer.toString(Calendar.getInstance().get(Calendar.YEAR));
    }
    
    
    public ArrayList<expenditure> getTimeExpenditue() throws SQLException{
    
        String time = GroupButtonUtils.getSelectedButtonText(timePeriod);
        ArrayList<expenditure> expList = new ArrayList<>();
        
        if(time.equals("One Month")){
            DBConnection con = new DBConnection();
     
            String mm = this.Smonth();
            String yyyy = this.getYear();
            
            System.out.println(yyyy+ mm);
            
            double total = 0;
            
            String allBill = "SELECT * FROM expenditure where  date LIKE '"+yyyy+"-"
                             +mm+"%'";
            
                        
            PreparedStatement ps = con.getConnection().prepareStatement(allBill);
            
            ResultSet resultSet = ps.executeQuery();
            
            while(resultSet.next()){
                expenditure exp = new expenditure();
                exp.ID = resultSet.getString(1);
                exp.Type = resultSet.getString(2);
                exp.Date = resultSet.getString(3);
                exp.des = resultSet.getString(4);
                exp.units = resultSet.getInt(5);
                exp.officer = resultSet.getString(6);
                exp.payed = resultSet.getDouble(7);
                exp.total = resultSet.getDouble(8);
                exp.chequeNum = resultSet.getInt(9);
                exp.month = resultSet.getString(10);
                System.out.println(exp.ID);
                expList.add(exp);
            }
            
            
            
        }else if(time.equals("Three Months")){
            DBConnection con = new DBConnection();
     
            String mm = this.Smonth();
            String yyyy = this.getYear();
            
            String two = Integer.toString(Integer.parseInt(mm) - 1);
            String three = Integer.toString(Integer.parseInt(mm) - 2);        
                   
            System.out.println(mm + two + three );
            System.out.println(yyyy+ mm);
            
            double total = 0;
            
            String allBill = "SELECT * FROM expenditure where  date LIKE '"+yyyy+"-"
                             +mm+"%' OR date LIKE '"+yyyy+"-_"+two+"%' OR date LIKE '"+yyyy+"-_"+three+"%'";
            
                        
            PreparedStatement ps = con.getConnection().prepareStatement(allBill);
            
            ResultSet resultSet = ps.executeQuery();
            
            while(resultSet.next()){
                expenditure exp = new expenditure();
                exp.ID = resultSet.getString(1);
                exp.Type = resultSet.getString(2);
                exp.Date = resultSet.getString(3);
                exp.des = resultSet.getString(4);
                exp.units = resultSet.getInt(5);
                exp.officer = resultSet.getString(6);
                exp.payed = resultSet.getDouble(7);
                exp.total = resultSet.getDouble(8);
                exp.chequeNum = resultSet.getInt(9);
                exp.month = resultSet.getString(10);
                System.out.println(exp.ID);
                expList.add(exp);
            }
            
    
        }
        else/* if(time.equals("One Year"))*/{
            DBConnection con = new DBConnection();
     
            String mm = this.Smonth();
            String yyyy = this.getYear();
    
            System.out.println(yyyy+ mm);
            
            double total = 0;
            
            String allBill = "SELECT * FROM expenditure where  date LIKE '"+yyyy+"-%'";
                  
            PreparedStatement ps = con.getConnection().prepareStatement(allBill);
            
            ResultSet resultSet = ps.executeQuery();
            
            while(resultSet.next()){
                expenditure exp = new expenditure();
                exp.ID = resultSet.getString(1);
                exp.Type = resultSet.getString(2);
                exp.Date = resultSet.getString(3);
                exp.des = resultSet.getString(4);
                exp.units = resultSet.getInt(5);
                exp.officer = resultSet.getString(6);
                exp.payed = resultSet.getDouble(7);
                exp.total = resultSet.getDouble(8);
                exp.chequeNum = resultSet.getInt(9);
                exp.month = resultSet.getString(10);
                System.out.println(exp.ID);
                expList.add(exp);
            }
                
        }
       
     return expList;
    }
    
    
    
    
    private void onrYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onrYActionPerformed
        /*customField.setEnabled(false);
        
        if(GroupButtonUtils.getSelectedButtonText(timePeriod).equals("Custom")){
               customField.setEnabled(true);
        }*/
    }//GEN-LAST:event_onrYActionPerformed

    private void selectPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectPaymentActionPerformed
        if(selectPayment.isSelected()){
               payed.setSelected(true);
               pending.setSelected(true);
        }
        
        selectPayment.setSelected(false);
    }//GEN-LAST:event_selectPaymentActionPerformed

    private void selectAllTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllTypeActionPerformed
        if( selectAllType.isSelected()){
                    
            electricityB.setSelected(true);
            waterB.setSelected(true);
            phoneB.setSelected(true);
            renrB.setSelected(true);
            maintenanceB.setSelected(true);
            otherB.setSelected(true);
            
        } 
        
        selectAllType.setSelected(false);
    }//GEN-LAST:event_selectAllTypeActionPerformed

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        
        
        this.clearTable();

        try {
            this.viewTable();
        } catch (SQLException ex) {
            Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
       
      try {
           jTable1.print();
            } catch (PrinterException ex) {
            Logger.getLogger(report.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jLabel10MouseClicked

    public ArrayList<expenditure> typeTimepayExp() throws SQLException{
        ArrayList<expenditure> typeList = new ArrayList<>();
        ArrayList<expenditure> timeList = new ArrayList<>();
        ArrayList<expenditure> TTList = new ArrayList<>();
       // ArrayList<expenditure> payList = new ArrayList<>();
        ArrayList<expenditure> FullList = new ArrayList<>();
        
        ArrayList<expenditure> payedexp = new ArrayList<>();
        ArrayList<expenditure> pendingexp = new ArrayList<>();
        ArrayList<expenditure> payment = new ArrayList<>();
        
        if(payed.isSelected()){
            payment = this.getPaymentProExpenditure();
        
        }else if(pending.isSelected()){
            payment = this.getPaymentNoNExpenditure();
        
        }else if(payed.isSelected() || pending.isSelected() ){
            selectPayment.setSelected(true);
            pendingexp = this.getPaymentNoNExpenditure();
            payedexp = this.getPaymentProExpenditure();
            payedexp.addAll(pendingexp);
            
            payment = payedexp;
            
        }

        //payList = this.payedpayExp();
        timeList =this.getTimeExpenditue();
        typeList = this.getTypeExpenditure();
        
        if(typeList.size()<= timeList.size()){
        
        for(int i = 0 ; i < timeList.size() ; i++){
            for(int j = 0 ; j < typeList.size() ; j++){
            
                if(timeList.get(i).ID.equals(typeList.get(j).ID)){
                    TTList.add(timeList.get(i));
                }
                     
            
            }
        }
        }else{
        for(int i = 0 ; i < typeList.size() ; i++){
            for(int j = 0 ; j < timeList.size() ; j++){
            
                if(typeList.get(i).ID.equals(timeList.get(j).ID)){
                    TTList.add(typeList.get(i));
                }
                
            }
        }
        
        }
        

        if(TTList.size()<=payment.size()){
        
        for(int i = 0 ; i < payment.size() ; i++){
            for(int j = 0 ; j < TTList.size() ; j++){
            
                if(payment.get(i).ID.equals(TTList.get(j).ID)){
                    
                    FullList.add(payment.get(i));
                }
                     
            
            }
    
        }
        }else{ 
            
        for(int i = 0 ; i < TTList.size() ; i++){
            for(int j = 0 ; j < payment.size() ; j++){
            
                if(TTList.get(i).ID.equals(payment.get(j).ID)){
                   
                    FullList.add(TTList.get(i));
                }
                     
            
            }
    
        }
        
        }
        
        return FullList;
        
    }
    
     public void viewTable() throws SQLException{
    
        //ArrayList<expenditure> List = typeTimeExp();
        ArrayList<expenditure> List = this.typeTimepayExp();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String[] row = new String[9];
            
        for(int i = 0; i < List.size(); i++){
            //DateFormat df = new SimpleDateFormat("yyyy-MM-dd"); 
            //row[3] = df.format(billList.get(i).billDate);

            
            row[0] = List.get(i).ID;
            row[1] = List.get(i).Date;
            row[2] = List.get(i).Type;
            row[3] = List.get(i).des;
            row[4] = List.get(i).officer;
            row[5] = Integer.toString(List.get(i).chequeNum);
            row[6] = Double.toString(List.get(i).payed);
            row[7] = Double.toString(List.get(i).total);
            
                   
            model.addRow(row);
        }
    }
     
    public ArrayList<expenditure> payedpayExp(){
        ArrayList<expenditure> payedexp = new ArrayList<>();
        ArrayList<expenditure> pendingexp = new ArrayList<>();
        ArrayList<expenditure> payment = new ArrayList<>();
        
        if(payed.isSelected()){
            payment = this.getPaymentProExpenditure();
        
        }else if(pending.isSelected()){
            payment = this.getPaymentNoNExpenditure();
        
        }else if(payed.isSelected() || pending.isSelected() ){
            selectPayment.setSelected(true);
            pendingexp = this.getPaymentNoNExpenditure();
            payedexp = this.getPaymentProExpenditure();
            payedexp.addAll(pendingexp);
            
            payment = payedexp;
            
        }
        
        
        return payment;
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox electricityB;
    private javax.swing.JLabel errorTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTable jTable1;
    private javax.swing.JCheckBox maintenanceB;
    private javax.swing.JRadioButton oneM;
    private javax.swing.JRadioButton onrY;
    private javax.swing.JCheckBox otherB;
    private javax.swing.JCheckBox payed;
    private javax.swing.JCheckBox pending;
    private javax.swing.JCheckBox phoneB;
    private javax.swing.JCheckBox renrB;
    private javax.swing.JCheckBox selectAllType;
    private javax.swing.JCheckBox selectPayment;
    private javax.swing.JRadioButton threeM;
    private javax.swing.ButtonGroup timePeriod;
    private javax.swing.JCheckBox waterB;
    // End of variables declaration//GEN-END:variables
}
